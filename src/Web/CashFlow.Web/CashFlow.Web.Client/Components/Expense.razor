@using CashFlow.Communication.Requests.Expenses
@using CashFlow.Communication.Responses.Expenses
@using System.Globalization

@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudCard Class="d-flex rounded-10 px-3 flex-row" Style="width: 80%;">
    <MudCardContent Class="d-flex justify-space-between">
        <div class="d-flex flex-column" style="width: 60%;">
            <MudText Typo="Typo.h5">@ExpenseResponse?.Title</MudText>
            <MudText Typo="Typo.body2">@ExpenseResponse?.Description</MudText>
        </div>
        <div class="d-flex align-center gap-5" style="width: 40%;">
            <div class="d-flex align-center">
                <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.AccessTimeFilled" />
                <MudText Typo="Typo.body1" Align="Align.Center">@(ExpenseResponse?.Date.ToString("dd/MM/yyyy"))</MudText>
            </div>
            <div>
                <MudText Typo="Typo.h5" Color="Color.Error" Align="Align.Center">@(ExpenseResponse?.Amount.ToString("C", new CultureInfo("pt-BR")))</MudText>
            </div>
        </div>
    </MudCardContent>
    <MudCardActions Class="d-flex gap-3">
        <MudFab Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" @onclick="OpenEditDialog" />
        <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="OpenDeleteDialog" />
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    [EditorRequired]
    public ResponseExpenseJson? ExpenseResponse { get; set; }  

    [CascadingParameter]
    private EventCallback HandleUpdate { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    private async Task DeleteExpense()
    {
        using var clientFactory = CashFlowApiClientFactory.CreateClient(Configuration);

        try
        {            
            await clientFactory.DeleteAsync($"{clientFactory.BaseAddress}/expenses/{ExpenseResponse?.Id}");

            Snackbar.Add("Despesa deletada com sucesso!", Severity.Success);
        }
        catch(Exception)
        {
            Snackbar.Add("Ocorreu um erro ao deletar a despesa!", Severity.Error);
        }        

        await OnDelete.InvokeAsync(ExpenseResponse!.Id);
    }

    private async Task OpenEditDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
        };

        var parameters = new DialogParameters<UpdateExpense>
        {
            { x => x.Expense, new RequestExpenseJson
                {
                    Title = ExpenseResponse!.Title,
                    Amount = ExpenseResponse.Amount,
                    Description = ExpenseResponse.Description,
                    Date = ExpenseResponse.Date,
                    PaymentType = ExpenseResponse.PaymentType
                } 
            },
            { x => x.ExpenseId, ExpenseResponse.Id }
        };

        await DialogService.ShowAsync<UpdateExpense>("Atualizar", parameters, options);
    }

    private async Task OpenDeleteDialog()
    {
        var parameters = new DialogParameters<Dialog>
        {
            { x => x.Title, "Deletar despesa" },
            { x => x.Content, "Deseja realmente deletar essa despesa?" },
            { x => x.RefusingText, "Cancelar" },
            { x => x.AcceptText, "Deletar" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,                        
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
        var dialogResult = await dialog.Result;     

        if(dialogResult is not null && !dialogResult.Canceled)
        {
            await DeleteExpense();            
        }
    }    
}    
