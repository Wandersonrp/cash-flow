@using CashFlow.Communication.Responses.Expenses
@using System.Globalization

@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudCard Class="d-flex rounded-10 px-3 flex-row" Style="width: 80%;">
    <MudCardContent Class="d-flex justify-space-between">
        <div class="d-flex flex-column" style="width: 60%;">
            <MudText Typo="Typo.h5">@ExpenseTitle</MudText>
            <MudText Typo="Typo.body2">@ExpenseDescription</MudText>
        </div>
        <div class="d-flex align-center" style="width: 20%;">
            <MudText Typo="Typo.h5" Color="Color.Error" Align="Align.Center">@(ExpenseAmount.ToString("C", new CultureInfo("pt-BR")))</MudText>
        </div>
    </MudCardContent>
    <MudCardActions Class="d-flex gap-3">        
        <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="OpenDialog" />
    </MudCardActions>
</MudCard>

@code { 

    [Parameter]
    [EditorRequired]
    public string ExpenseTitle { get; set; } = string.Empty;

    [Parameter]
    [EditorRequired]
    public string ExpenseDescription { get; set; } = string.Empty;

    [Parameter]
    [EditorRequired]
    public int ExpenseId { get; set; }    

    [Parameter]
    [EditorRequired]
    public decimal ExpenseAmount { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    private async Task DeleteExpense()
    {
        using var clientFactory = CashFlowApiClientFactory.CreateClient(Configuration);

        try
        {            
            await clientFactory.DeleteAsync($"{clientFactory.BaseAddress}/expenses/{ExpenseId}");

            Snackbar.Add("Despesa deletada com sucesso!", Severity.Success);
        }
        catch(Exception)
        {
            Snackbar.Add("Ocorreu um erro ao deletar a despesa!", Severity.Error);
        }        
        
        await OnDelete.InvokeAsync(ExpenseId);                
    }

    private async Task OpenDialog()
    {
        var parameters = new DialogParameters<Dialog>
        {
            { x => x.Title, "Deletar despesa" },
            { x => x.Content, "Deseja realmente deletar essa despesa?" },
            { x => x.RefusingText, "Cancelar" },
            { x => x.AcceptText, "Deletar" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,                        
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
        var dialogResult = await dialog.Result;     

        if(dialogResult is not null && !dialogResult.Canceled)
        {
            await DeleteExpense();            
        }
    }    
}    
