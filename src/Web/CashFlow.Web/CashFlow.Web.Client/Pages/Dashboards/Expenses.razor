@page "/despesas"

@inject IDialogService DialogService

@using CashFlow.Communication.Enums.Expenses
@using CashFlow.Communication.Requests.Expenses
@using CashFlow.Communication.Responses.Expenses
@using CashFlow.Communication.Responses.Pagination
@using System.Text.Json

@inject IConfiguration Configuration

@layout MainLayout

<PageTitle>Despesas</PageTitle>

<div class="px-8 d-flex align-center justify-space-between" style="width: 80%;">
    <div class="d-flex align-center">
        <MudText Typo="Typo.h3" Class="ma-0 pa-0" GutterBottom="true">Despesas</MudText>
        <MudFab Class="ml-5" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="OpenDialog"/>
    </div>      
</div>


<div class="px-8 d-flex flex-column mt-10 gap-5">
    @if(_expenses.Count == 0)
    {
        <ExpenseSkeleton />
    }
    else
    {
        @foreach(var expense in _expenses)
        {
            <Expense ExpenseResponse="@expense" OnDelete="HandleDelete" />
        }
    }
        
    <MudPagination Color="Color.Primary" Count="@((int)_pagination.TotalPages)" SelectedChanged="SelectedChanged" />
</div>

@code {
    private List<ResponseExpenseJson> _expenses = new();
    private int _selected = 1;
    private int _page = 1;
    private int _itemsPerPage = 3;
    private ResponsePaginationJson _pagination = new();

    private DialogOptions _options = new DialogOptions
    {
        CloseOnEscapeKey = true,        
    };

    protected override async Task OnInitializedAsync()
    {        
        await GetAllExpenses();
    }

    private async Task GetAllExpenses()
    {
        using var clientFactory = CashFlowApiClientFactory.CreateClient(Configuration);

        var response = await clientFactory.GetFromJsonAsync<ResponseGetAllExpensesJson>($"{clientFactory.BaseAddress}/expenses?page={_page}&itemsPerPage={_itemsPerPage}");      

        if(response is not null)
        {
            _expenses = response.Expenses;
            _pagination = response.Pagination;                                    
        }  
    }

    private async Task SelectedChanged(int page)
    {
        _page = page;

        await GetAllExpenses();
    }

    private void HandleDelete(int expenseId)
    {
        var expenseToRemove = _expenses.FirstOrDefault(x => x.Id == expenseId);

        if(expenseToRemove is not null)
        {
            _expenses.Remove(expenseToRemove);
        }

        StateHasChanged();
    }

    private async Task HandleRegister()
    {
        await GetAllExpenses();       

        StateHasChanged();
    }

    private async Task HandleUpdate()
    {
        await GetAllExpenses();

        StateHasChanged();
    }

    private async Task OpenDialog()
    {          
        var parameters = new DialogParameters<RegisterExpense>
        {
            { x => x.OnRegister, EventCallback.Factory.Create(this, HandleRegister)}
        };

        var dialog = await DialogService.ShowAsync<RegisterExpense>("Register", parameters, _options);

        var dialogResult = await dialog.Result;         
    }      
}    
